head(select(empleados, sexo, noblanca = minoria, salario))
head(select(empleados, sexo:salario))
head(select(empleados, -(sexo:salario)))
head(select(empleados, starts_with("s")))
head(mutate(emplea2, incsal = empleados[,"salario"] - empleados[, "salini"]))
head(mutate(emplea2, tsal = incsal/tiempemp))
library(dplyr)
load("datos/empleados.RData")
data.frame(Etiquetas = attr(empleados, "variable.labels"))  # Listamos las etiquetas
attr(empleados, "variable.labels") <- NULL                  # Eliminamos las etiquetas para que no molesten...
emplea2 <- select(empleados, c(1, 2, 3, 4, 5, 6))
head(emplea2)
head(select(empleados, sexo, noblanca = minoria, salario))
head(select(empleados, sexo:salario))
head(select(empleados, -(sexo:salario)))
head(select(empleados, starts_with("s")))
head(mutate(emplea2, incsal = empleados[,"salario"] - empleados[, "salini"]))
head(mutate(emplea2, tsal = empleados[,"incsal"]/empleados[,"tiempemp""]))
library(dplyr)
load("datos/empleados.RData")
data.frame(Etiquetas = attr(empleados, "variable.labels"))  # Listamos las etiquetas
attr(empleados, "variable.labels") <- NULL                  # Eliminamos las etiquetas para que no molesten...
emplea2 <- select(empleados, c(1, 2, 3, 4, 5, 6))
head(emplea2)
head(select(empleados, sexo, noblanca = minoria, salario))
head(select(empleados, sexo:salario))
head(select(empleados, -(sexo:salario)))
head(select(empleados, starts_with("s")))
head(mutate(emplea2, incsal = empleados[,"salario"] - empleados[,"salini"]))
head(mutate(emplea2, tsal = emplea2[,"incsal"] / emplea2[,"tiempemp"]))
View(emplea2)
View(empleados)
library(dplyr)
load("datos/empleados.RData")
data.frame(Etiquetas = attr(empleados, "variable.labels"))  # Listamos las etiquetas
attr(empleados, "variable.labels") <- NULL                  # Eliminamos las etiquetas para que no molesten...
emplea2 <- select(empleados, c(1, 2, 3, 4, 5, 6))
head(emplea2)
head(select(empleados, sexo, noblanca = minoria, salario))
head(select(empleados, sexo:salario))
head(select(empleados, -(sexo:salario)))
head(select(empleados, starts_with("s")))
head(mutate(emplea2, incsal = empleados[,"salario"] - empleados[,"salini"]))
head(mutate(emplea2, tsal = emplea2[,"incsal"] / empleados[,"tiempemp"]))
library(dplyr)
load("datos/empleados.RData")
data.frame(Etiquetas = attr(empleados, "variable.labels"))  # Listamos las etiquetas
attr(empleados, "variable.labels") <- NULL                  # Eliminamos las etiquetas para que no molesten...
emplea2 <- select(empleados, c(1, 2, 3, 4, 5, 6))
head(emplea2)
head(select(empleados, sexo, noblanca = minoria, salario))
head(select(empleados, sexo:salario))
head(select(empleados, -(sexo:salario)))
head(select(empleados, starts_with("s")))
head(mutate(emplea2, incsal = empleados[,"salario"] - empleados[,"salini"]))
head(mutate(emplea2, tsal = emplea2[,"incsal"] / empleados[,8]))
library(dplyr)
load("datos/empleados.RData")
data.frame(Etiquetas = attr(empleados, "variable.labels"))  # Listamos las etiquetas
attr(empleados, "variable.labels") <- NULL                  # Eliminamos las etiquetas para que no molesten...
emplea2 <- select(empleados, c(1, 2, 3, 4, 5, 6))
head(emplea2)
head(select(empleados, sexo, noblanca = minoria, salario))
head(select(empleados, sexo:salario))
head(select(empleados, -(sexo:salario)))
head(select(empleados, starts_with("s")))
head(mutate(emplea2, incsal = empleados[,"salario"] - empleados[,"salini"]))
head(mutate(emplea2, tsal = emplea2[,"incsal"]/empleados[,8]))
library(dplyr)
load("datos/empleados.RData")
data.frame(Etiquetas = attr(empleados, "variable.labels"))  # Listamos las etiquetas
attr(empleados, "variable.labels") <- NULL                  # Eliminamos las etiquetas para que no molesten...
emplea2 <- select(empleados, c(1, 2, 3, 4, 5, 6))
head(emplea2)
head(select(empleados, sexo, noblanca = minoria, salario))
head(select(empleados, sexo:salario))
head(select(empleados, -(sexo:salario)))
head(select(empleados, starts_with("s")))
head(mutate(emplea2, incsal = empleados[,"salario"] - empleados[,"salini"], tsal = emplea2[,"incsal"] / empleados[,"tiempemp"]))
library(dplyr)
load("datos/empleados.RData")
data.frame(Etiquetas = attr(empleados, "variable.labels"))  # Listamos las etiquetas
attr(empleados, "variable.labels") <- NULL                  # Eliminamos las etiquetas para que no molesten...
emplea2 <- select(empleados, c(1, 2, 3, 4, 5, 6))
head(emplea2)
head(select(empleados, sexo, noblanca = minoria, salario))
head(select(empleados, sexo:salario))
head(select(empleados, -(sexo:salario)))
head(select(empleados, starts_with("s")))
head(mutate(emplea2, incsal = empleados[,"salario"] - empleados[,"salini"], tsal = empleados[,"incsal"] / empleados[,"tiempemp"]))
library(dplyr)
load("datos/empleados.RData")
data.frame(Etiquetas = attr(empleados, "variable.labels"))  # Listamos las etiquetas
attr(empleados, "variable.labels") <- NULL                  # Eliminamos las etiquetas para que no molesten...
emplea2 <- select(empleados, c(1, 2, 3, 4, 5, 6))
head(emplea2)
head(select(empleados, sexo, noblanca = minoria, salario))
head(select(empleados, sexo:salario))
head(select(empleados, -(sexo:salario)))
head(select(empleados, starts_with("s")))
head(mutate(emplea2, incsal = empleados[,"salario"] - empleados[,"salini"]))
head(mutate(emplea2, tsal = empleados[,"incsal"] / empleados[,"tiempemp"]))
library(dplyr)
load("datos/empleados.RData")
data.frame(Etiquetas = attr(empleados, "variable.labels"))  # Listamos las etiquetas
attr(empleados, "variable.labels") <- NULL                  # Eliminamos las etiquetas para que no molesten...
emplea2 <- select(empleados, c(1, 2, 3, 4, 5, 6))
head(emplea2)
head(select(empleados, sexo, noblanca = minoria, salario))
head(select(empleados, sexo:salario))
head(select(empleados, -(sexo:salario)))
head(select(empleados, starts_with("s")))
head(mutate(emplea2, incsal = empleados[,"salario"] - empleados[,"salini"]))
head(mutate(emplea2, tsal = emplea2[,"incsal"] / empleados[,"tiempemp"]))
head(mutate(emplea2, tsal = emplea2[,"incsal"]/empleados[,"tiempemp"]))
head(mutate(emplea2, tsal = emplea2[,"incsal"]/empleados[,"tiempemp"]))
head(mutate(emplea2, tsal = emplea2[,"incsal"]/empleados[,"tiempemp"]))
head(mutate(emplea2, tsal = emplea2[,"incsal"]/empleados[,8]))
head(mutate(emplea2, tsal = emplea2[,"incsal"]/empleados[,8]))
head(mutate(emplea2, tsal = emplea2[,"incsal"]/empleados[,8]))
head(mutate(emplea2, tsal = emplea2[,"incsal"]/empleados[,8]))
head(mutate(emplea2, tsal = emplea2[,"incsal"]/empleados[,8]))
library(dplyr)
load("datos/empleados.RData")
data.frame(Etiquetas = attr(empleados, "variable.labels"))  # Listamos las etiquetas
attr(empleados, "variable.labels") <- NULL                  # Eliminamos las etiquetas para que no molesten...
emplea2 <- select(empleados, c(1, 2, 3, 4, 5, 6, 7, 8))
head(emplea2)
head(select(empleados, sexo, noblanca = minoria, salario))
head(select(empleados, sexo:salario))
head(select(empleados, -(sexo:salario)))
head(select(empleados, starts_with("s")))
head(mutate(emplea2, incsal = empleados[,"salario"] - empleados[,"salini"]))
head(mutate(emplea2, tsal = emplea2[,"incsal"]/empleados[,"tiempemp"]))
head(mutate(emplea2, tsal = emplea2[,"incsal"]/emplea2[,"tiempemp"]))
head(mutate(emplea2, tsal = emplea2[,"incsal"]/emplea2[,"tiempemp"]))
head(mutate(emplea2, tsal = emplea2[,"incsal"]/emplea2[,"tiempemp"]))
head(mutate(emplea2, tsal = emplea2[,"incsal"]/emplea2[,"tiempemp"]))
View(emplea2)
head(mutate(emplea2, tsal = mutate(emplea2, incsal = empleados[,"salario"] - empleados[,"salini"])/emplea2[,"tiempemp"]))
head(mutate(emplea2, tsal = empleados[,"salario"] - empleados[,"salini"]/emplea2[,"tiempemp"]))
emplea2 <- mutate(emplea2, incsal = empleados[,"salario"] - empleados[,"salini"])
head(emplea2)
head(mutate(emplea2, tsal = empleados[,"salario"] - empleados[,"salini"]/emplea2[,"tiempemp"]))
library(dplyr)
load("datos/empleados.RData")
data.frame(Etiquetas = attr(empleados, "variable.labels"))  # Listamos las etiquetas
attr(empleados, "variable.labels") <- NULL                  # Eliminamos las etiquetas para que no molesten...
emplea2 <- select(empleados, c(1, 2, 3, 4, 5, 6, 7, 8))
head(emplea2)
head(select(empleados, sexo, noblanca = minoria, salario))
head(select(empleados, sexo:salario))
head(select(empleados, -(sexo:salario)))
head(select(empleados, starts_with("s")))
emplea2 <- mutate(emplea2, incsal = empleados[,"salario"] - empleados[,"salini"])
head(emplea2)
head(mutate(emplea2, tsal = empleados[,"salario"] - empleados[,"salini"]/emplea2[,"tiempemp"]))
head(filter(emplea2, sexo == "Mujer", minoria == "Sí"))
head(filter(emplea2, sexo == "Mujer", empleados[,"minoria"] == "Sí"))
library(dplyr)
load("datos/empleados.RData")
data.frame(Etiquetas = attr(empleados, "variable.labels"))  # Listamos las etiquetas
attr(empleados, "variable.labels") <- NULL                  # Eliminamos las etiquetas para que no molesten...
emplea2 <- select(empleados, c(1, 2, 3, 4, 5, 6, 7, 8))
head(emplea2)
head(select(empleados, sexo, noblanca = minoria, salario))
head(select(empleados, sexo:salario))
head(select(empleados, -(sexo:salario)))
head(select(empleados, starts_with("s")))
emplea2 <- mutate(emplea2, incsal = empleados[,"salario"] - empleados[,"salini"])
head(emplea2)
head(mutate(emplea2, tsal = empleados[,"salario"] - empleados[,"salini"]/emplea2[,"tiempemp"]))
head(filter(emplea2, sexo == "Mujer", empleados[,"minoria"] == "Sí"))
head(arrange(emplea2, salario))
head(arrange(emplea2, desc(salini), salario))
summarise(empleados, sal.med = mean(salario), n = n())
summarise(group_by(empleados, sexo, minoria), sal.med = mean(salario), n = n())
empleados %>%  filter(catlab == "Directivo") %>%
group_by(sexo, minoria) %>%
summarise(sal.med = mean(salario), n = n())
empleados %>% select(sexo, catlab, salario) %>%
filter(catlab != "Seguridad") %>%
group_by(catlab) %>%
mutate(saldif = salario - mean(salario)) %>%
ungroup() %>%
boxplot(saldif ~ sexo*droplevels(catlab), data = .)
abline(h = 0, lty = 2)
emplea2 <- select(empleados, id, sexo, fechnac, educ, catlab, salario, salini, tiempemp)
head(emplea2)
emplea2 <- select(empleados, id, sexo, fechnac, educ, catlab, salario, salini, tiempemp)
head(emplea2)
emplea2 <- select(empleados, c("id", "sexo", "fechnac", "educ", "catlab", "salario", "salini", "tiempemp"))
head(emplea2)
emplea2 <- select(empleados, c("id", "sexo", "fechnac", "educ", "catlab", "salario", "salini", "tiempemp"))
head(emplea2)
library(dplyr)
load("datos/empleados.RData")
data.frame(Etiquetas = attr(empleados, "variable.labels"))  # Listamos las etiquetas
attr(empleados, "variable.labels") <- NULL                  # Eliminamos las etiquetas para que no molesten...
emplea2 <- select(empleados, c("id", "sexo", "fechnac", "educ", "catlab", "salario", "salini", "tiempemp"))
head(emplea2)
head(select(empleados, sexo, noblanca = minoria, salario))
head(select(empleados, sexo:salario))
head(select(empleados, -(sexo:salario)))
head(select(empleados, starts_with("s")))
emplea2 <- mutate(emplea2, incsal = empleados[,"salario"] - empleados[,"salini"])
head(emplea2)
head(mutate(emplea2, tsal = empleados[,"salario"] - empleados[,"salini"]/emplea2[,"tiempemp"]))
head(filter(emplea2, sexo == "Mujer", empleados[,"minoria"] == "Sí"))
head(arrange(emplea2, salario))
head(arrange(emplea2, desc(salini), salario))
summarise(empleados, sal.med = mean(salario), n = n())
summarise(group_by(empleados, sexo, minoria), sal.med = mean(salario), n = n())
empleados %>%  filter(catlab == "Directivo") %>%
group_by(sexo, minoria) %>%
summarise(sal.med = mean(salario), n = n())
empleados %>% select(sexo, catlab, salario) %>%
filter(catlab != "Seguridad") %>%
group_by(catlab) %>%
mutate(saldif = salario - mean(salario)) %>%
ungroup() %>%
boxplot(saldif ~ sexo*droplevels(catlab), data = .)
abline(h = 0, lty = 2)
load("datos/hbat.RData")
as.data.frame(attr(hbat, "variable.labels"))
df <- hbat[, c(7:19, 23)]  # Nota: realmente no copia el objeto...
set.seed(1)
nobs <- nrow(df)
itrain <- sample(nobs, 0.8 * nobs)
train <- df[itrain, ]
test <- df[-itrain, ]
# plot(train)
mcor <- cor(train)
corrplot::corrplot(mcor, method = "ellipse")
print(mcor, digits = 1)
modelo <- lm(fidelida ~ velocida, train)
summary(modelo)
plot(fidelida ~ velocida, train)
abline(modelo)
valores <- seq(1, 6, len = 100)
newdata <- data.frame(velocida = valores)
pred <- predict(modelo, newdata = newdata, interval = c("confidence"))
# head(pred)
plot(fidelida ~ velocida, train)
matlines(valores, pred, lty = c(1, 2, 2), col = 1)
pred2 <- predict(modelo, newdata = newdata, interval = c("prediction"))
matlines(valores, pred2[, -1], lty = 3, col = 1)
legend("topleft", c("Ajuste", "Int. confianza", "Int. predicción"), lty = c(1, 2, 3))
set.seed(1)
n <- 50
rand.gen <- runif # rnorm
x1 <- rand.gen(n)
rho <- sqrt(0.99) # coeficiente de correlación
x2 <- rho*x1 + sqrt(1 - rho^2)*rand.gen(n)
fit.x2 <- lm(x2 ~ x1)
# plot(x1, x2)
# summary(fit.x2)
# Rejilla x-y para predicciones:
x1.range <- range(x1)
x1.grid <- seq(x1.range[1], x1.range[2], length.out = 30)
x2.range <- range(x2)
x2.grid <- seq(x2.range[1], x2.range[2], length.out = 30)
xy <- expand.grid(x1 = x1.grid, x2 = x2.grid)
# Modelo teórico:
model.teor <- function(x1, x2) x1
# model.teor <- function(x1, x2) x1 - 0.5*x2
y.grid <- matrix(mapply(model.teor, xy$x1, xy$x2), nrow = length(x1.grid))
y.mean <- mapply(model.teor, x1, x2)
library(plot3D)
ylim <- c(-2, 3) # range(y, y.pred)
scatter3D(z = y.mean, x = x1, y = x2, pch = 16, cex = 1, clim = ylim, zlim = ylim,
theta = -40, phi = 20, ticktype = "detailed",
main = "Modelo teórico y valores de las variables explicativas",
xlab = "x1", ylab = "x2", zlab = "y", sub = sprintf("R2(x1,x2) = %.2f", summary(fit.x2)$r.squared),
surf = list(x = x1.grid, y = x2.grid, z = y.grid, facets = NA))
scatter3D(z = rep(ylim[1], n), x = x1, y = x2, add = TRUE, colkey = FALSE,
pch = 16, cex = 1, col = "black")
x2.pred <- predict(fit.x2, newdata = data.frame(x1 = x1.range))
lines3D(z = rep(ylim[1], 2), x = x1.range, y = x2.pred, add = TRUE, colkey = FALSE, col = "black")
x2 <- rand.gen(n)
y.mean <- mapply(model.teor, x1, x2)
for (isim in 1:nsim) {
# Simular respuesta
set.seed(isim)
y <- y.mean + rnorm(n, 0, sd.err)
# Ajuste lineal y superficie de predicción
fit2 <- lm(y ~ x1 + x2)
y.pred <- matrix(predict(fit2, newdata = xy), nrow = length(x1.grid))
# Representar
fitpoints <- predict(fit2)
scatter3D(z = y, x = x1, y = x2, pch = 16, cex = 1.5, clim = ylim, zlim = ylim,
theta = -40, phi = 20, ticktype = "detailed",
main = "Modelo ajustado", xlab = "x1", ylab = "x2", zlab = "y",
surf = list(x = x1.grid, y = x2.grid, z = y.pred,
facets = NA, fit = fitpoints))
}
load("datos/hbat.RData")
as.data.frame(attr(hbat, "variable.labels"))
df <- hbat[, c(7:19, 23)]  # Nota: realmente no copia el objeto...
set.seed(1)
nobs <- nrow(df)
itrain <- sample(nobs, 0.8 * nobs)
train <- df[itrain, ]
test <- df[-itrain, ]
# plot(train)
mcor <- cor(train)
corrplot::corrplot(mcor, method = "ellipse")
print(mcor, digits = 1)
modelo <- lm(fidelida ~ velocida, train)
summary(modelo)
plot(fidelida ~ velocida, train)
abline(modelo)
valores <- seq(1, 6, len = 100)
newdata <- data.frame(velocida = valores)
pred <- predict(modelo, newdata = newdata, interval = c("confidence"))
# head(pred)
plot(fidelida ~ velocida, train)
matlines(valores, pred, lty = c(1, 2, 2), col = 1)
pred2 <- predict(modelo, newdata = newdata, interval = c("prediction"))
matlines(valores, pred2[, -1], lty = 3, col = 1)
legend("topleft", c("Ajuste", "Int. confianza", "Int. predicción"), lty = c(1, 2, 3))
set.seed(1)
n <- 50
rand.gen <- runif # rnorm
x1 <- rand.gen(n)
rho <- sqrt(0.99) # coeficiente de correlación
x2 <- rho*x1 + sqrt(1 - rho^2)*rand.gen(n)
fit.x2 <- lm(x2 ~ x1)
# plot(x1, x2)
# summary(fit.x2)
# Rejilla x-y para predicciones:
x1.range <- range(x1)
x1.grid <- seq(x1.range[1], x1.range[2], length.out = 30)
x2.range <- range(x2)
x2.grid <- seq(x2.range[1], x2.range[2], length.out = 30)
xy <- expand.grid(x1 = x1.grid, x2 = x2.grid)
# Modelo teórico:
model.teor <- function(x1, x2) x1
# model.teor <- function(x1, x2) x1 - 0.5*x2
y.grid <- matrix(mapply(model.teor, xy$x1, xy$x2), nrow = length(x1.grid))
y.mean <- mapply(model.teor, x1, x2)
library(plot3D)
ylim <- c(-2, 3) # range(y, y.pred)
scatter3D(z = y.mean, x = x1, y = x2, pch = 16, cex = 1, clim = ylim, zlim = ylim,
theta = -40, phi = 20, ticktype = "detailed",
main = "Modelo teórico y valores de las variables explicativas",
xlab = "x1", ylab = "x2", zlab = "y", sub = sprintf("R2(x1,x2) = %.2f", summary(fit.x2)$r.squared),
surf = list(x = x1.grid, y = x2.grid, z = y.grid, facets = NA))
scatter3D(z = rep(ylim[1], n), x = x1, y = x2, add = TRUE, colkey = FALSE,
pch = 16, cex = 1, col = "black")
x2.pred <- predict(fit.x2, newdata = data.frame(x1 = x1.range))
lines3D(z = rep(ylim[1], 2), x = x1.range, y = x2.pred, add = TRUE, colkey = FALSE, col = "black")
summary(fit2)
load("datos/hbat.RData")
as.data.frame(attr(hbat, "variable.labels"))
df <- hbat[, c(7:19, 23)]  # Nota: realmente no copia el objeto...
set.seed(1)
nobs <- nrow(df)
itrain <- sample(nobs, 0.8 * nobs)
train <- df[itrain, ]
test <- df[-itrain, ]
# plot(train)
mcor <- cor(train)
corrplot::corrplot(mcor, method = "ellipse")
print(mcor, digits = 1)
modelo <- lm(fidelida ~ velocida, train)
summary(modelo)
plot(fidelida ~ velocida, train)
abline(modelo)
valores <- seq(1, 6, len = 100)
newdata <- data.frame(velocida = valores)
pred <- predict(modelo, newdata = newdata, interval = c("confidence"))
# head(pred)
plot(fidelida ~ velocida, train)
matlines(valores, pred, lty = c(1, 2, 2), col = 1)
pred2 <- predict(modelo, newdata = newdata, interval = c("prediction"))
matlines(valores, pred2[, -1], lty = 3, col = 1)
legend("topleft", c("Ajuste", "Int. confianza", "Int. predicción"), lty = c(1, 2, 3))
set.seed(1)
n <- 50
rand.gen <- runif # rnorm
x1 <- rand.gen(n)
rho <- sqrt(0.99) # coeficiente de correlación
x2 <- rho*x1 + sqrt(1 - rho^2)*rand.gen(n)
fit.x2 <- lm(x2 ~ x1)
# plot(x1, x2)
# summary(fit.x2)
# Rejilla x-y para predicciones:
x1.range <- range(x1)
x1.grid <- seq(x1.range[1], x1.range[2], length.out = 30)
x2.range <- range(x2)
x2.grid <- seq(x2.range[1], x2.range[2], length.out = 30)
xy <- expand.grid(x1 = x1.grid, x2 = x2.grid)
# Modelo teórico:
model.teor <- function(x1, x2) x1
# model.teor <- function(x1, x2) x1 - 0.5*x2
y.grid <- matrix(mapply(model.teor, xy$x1, xy$x2), nrow = length(x1.grid))
y.mean <- mapply(model.teor, x1, x2)
library(plot3D)
ylim <- c(-2, 3) # range(y, y.pred)
scatter3D(z = y.mean, x = x1, y = x2, pch = 16, cex = 1, clim = ylim, zlim = ylim,
theta = -40, phi = 20, ticktype = "detailed",
main = "Modelo teórico y valores de las variables explicativas",
xlab = "x1", ylab = "x2", zlab = "y", sub = sprintf("R2(x1,x2) = %.2f", summary(fit.x2)$r.squared),
surf = list(x = x1.grid, y = x2.grid, z = y.grid, facets = NA))
scatter3D(z = rep(ylim[1], n), x = x1, y = x2, add = TRUE, colkey = FALSE,
pch = 16, cex = 1, col = "black")
x2.pred <- predict(fit.x2, newdata = data.frame(x1 = x1.range))
lines3D(z = rep(ylim[1], 2), x = x1.range, y = x2.pred, add = TRUE, colkey = FALSE, col = "black")
library(car)
vif(fit)
load("datos/hbat.RData")
as.data.frame(attr(hbat, "variable.labels"))
df <- hbat[, c(7:19, 23)]  # Nota: realmente no copia el objeto...
set.seed(1)
nobs <- nrow(df)
itrain <- sample(nobs, 0.8 * nobs)
train <- df[itrain, ]
test <- df[-itrain, ]
# plot(train)
mcor <- cor(train)
corrplot::corrplot(mcor, method = "ellipse")
print(mcor, digits = 1)
modelo <- lm(fidelida ~ velocida, train)
summary(modelo)
plot(fidelida ~ velocida, train)
abline(modelo)
valores <- seq(1, 6, len = 100)
newdata <- data.frame(velocida = valores)
pred <- predict(modelo, newdata = newdata, interval = c("confidence"))
# head(pred)
plot(fidelida ~ velocida, train)
matlines(valores, pred, lty = c(1, 2, 2), col = 1)
pred2 <- predict(modelo, newdata = newdata, interval = c("prediction"))
matlines(valores, pred2[, -1], lty = 3, col = 1)
legend("topleft", c("Ajuste", "Int. confianza", "Int. predicción"), lty = c(1, 2, 3))
set.seed(1)
n <- 50
rand.gen <- runif # rnorm
x1 <- rand.gen(n)
rho <- sqrt(0.99) # coeficiente de correlación
x2 <- rho*x1 + sqrt(1 - rho^2)*rand.gen(n)
fit.x2 <- lm(x2 ~ x1)
# plot(x1, x2)
# summary(fit.x2)
# Rejilla x-y para predicciones:
x1.range <- range(x1)
x1.grid <- seq(x1.range[1], x1.range[2], length.out = 30)
x2.range <- range(x2)
x2.grid <- seq(x2.range[1], x2.range[2], length.out = 30)
xy <- expand.grid(x1 = x1.grid, x2 = x2.grid)
# Modelo teórico:
model.teor <- function(x1, x2) x1
# model.teor <- function(x1, x2) x1 - 0.5*x2
y.grid <- matrix(mapply(model.teor, xy$x1, xy$x2), nrow = length(x1.grid))
y.mean <- mapply(model.teor, x1, x2)
library(plot3D)
ylim <- c(-2, 3) # range(y, y.pred)
scatter3D(z = y.mean, x = x1, y = x2, pch = 16, cex = 1, clim = ylim, zlim = ylim,
theta = -40, phi = 20, ticktype = "detailed",
main = "Modelo teórico y valores de las variables explicativas",
xlab = "x1", ylab = "x2", zlab = "y", sub = sprintf("R2(x1,x2) = %.2f", summary(fit.x2)$r.squared),
surf = list(x = x1.grid, y = x2.grid, z = y.grid, facets = NA))
scatter3D(z = rep(ylim[1], n), x = x1, y = x2, add = TRUE, colkey = FALSE,
pch = 16, cex = 1, col = "black")
x2.pred <- predict(fit.x2, newdata = data.frame(x1 = x1.range))
lines3D(z = rep(ylim[1], 2), x = x1.range, y = x2.pred, add = TRUE, colkey = FALSE, col = "black")
load("datos/hbat.RData")
as.data.frame(attr(hbat, "variable.labels"))
df <- hbat[, c(7:19, 23)]  # Nota: realmente no copia el objeto...
set.seed(1)
nobs <- nrow(df)
itrain <- sample(nobs, 0.8 * nobs)
train <- df[itrain, ]
test <- df[-itrain, ]
# plot(train)
mcor <- cor(train)
corrplot::corrplot(mcor, method = "ellipse")
print(mcor, digits = 1)
modelo <- lm(fidelida ~ velocida, train)
summary(modelo)
plot(fidelida ~ velocida, train)
abline(modelo)
valores <- seq(1, 6, len = 100)
newdata <- data.frame(velocida = valores)
pred <- predict(modelo, newdata = newdata, interval = c("confidence"))
# head(pred)
plot(fidelida ~ velocida, train)
matlines(valores, pred, lty = c(1, 2, 2), col = 1)
pred2 <- predict(modelo, newdata = newdata, interval = c("prediction"))
matlines(valores, pred2[, -1], lty = 3, col = 1)
legend("topleft", c("Ajuste", "Int. confianza", "Int. predicción"), lty = c(1, 2, 3))
set.seed(1)
n <- 50
rand.gen <- runif # rnorm
x1 <- rand.gen(n)
rho <- sqrt(0.99) # coeficiente de correlación
x2 <- rho*x1 + sqrt(1 - rho^2)*rand.gen(n)
fit.x2 <- lm(x2 ~ x1)
# plot(x1, x2)
# summary(fit.x2)
# Rejilla x-y para predicciones:
x1.range <- range(x1)
x1.grid <- seq(x1.range[1], x1.range[2], length.out = 30)
x2.range <- range(x2)
x2.grid <- seq(x2.range[1], x2.range[2], length.out = 30)
xy <- expand.grid(x1 = x1.grid, x2 = x2.grid)
# Modelo teórico:
model.teor <- function(x1, x2) x1
# model.teor <- function(x1, x2) x1 - 0.5*x2
y.grid <- matrix(mapply(model.teor, xy$x1, xy$x2), nrow = length(x1.grid))
y.mean <- mapply(model.teor, x1, x2)
